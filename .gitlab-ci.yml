########################################################
###############GTlab Pipeline Version 1.5.0 ############
########################################################

# Environment variables to use in the pipeline globally
variables:
  PIPELINEVERSION: "1.5.0"

# inlcude some templates from this file
include:
  - project: 'at-twk/gitlab-templates'
    file: '/ci-templates/.ci-templates.yml'

stages:
  - update
  - build
  - test
  - regressionTest
  - copy
  - codequality
  - badges

devtoolsUpdateWindows:
  stage: update
  allow_failure: true
  script:
    - '& $env:MAINTENANCETOOL up --confirm-command'
  only:
    - main  
  tags:
    - Win10
  variables:
    MAINTENANCETOOL: "C:\\devel\\GTlab-DevTools\\Setup GTlab-DevTools.exe"  

devtoolsUpdateLinux:
  stage: update
  allow_failure: true  
  script:
    - cd /home/gitlab-runner/GTlab-Devtools/
    - ./Setup\ GTlab-DevTools up --confirm-command
  only:
    - main  
  tags:
    - Linux
  variables:
    MAINTENANCETOOL: "/home/gitlab-runner/GTlab-Devtools/" 
  
# Windows build
windowsBuildDebug:
  stage: build
  script:
    - .\tests\build\build-512.bat 1>buildLog512.txt
  tags:
    - Win10
  artifacts:
    paths:
      - lib\$TARGETDIRNAME\$TARGETNAME-d.dll
      - lib\$TARGETDIRNAME\$TARGETNAME-d.lib
      - lib\$TARGETDIRNAME\$TARGETNAME-d.pdb
      - include\$TARGETDIRNAME\*.h
      - build\$UNITTESTSNAME.exe
      - build\$UNITTESTSNAME.pdb
      - buildLog512.txt
    expire_in: 1 week
    when: always
  variables:
    BUILDMODE: debug
    BUILDUNITTESTS: "true"
  parallel:
    matrix: 
      - DEVTOOLS: [$DEVTOOLS_Win_Stable, $DEVTOOLS_Win_Unstable]

windowsBuildRelease:
  stage: build
  script:
    - .\tests\build\build-512.bat
  tags:
    - Win10
  only:
    - main
    - tags
  artifacts:
    paths:
      - lib\$TARGETDIRNAME\$TARGETNAME.dll
      - lib\$TARGETDIRNAME\$TARGETNAME.lib
      - include\$TARGETDIRNAME\*.h
    expire_in: 1 week
    when: always
  variables:
    BUILDMODE: release
    BUILDUNITTESTS: "false"
  parallel:
    matrix: 
      - DEVTOOLS: [$DEVTOOLS_Win_Stable, $DEVTOOLS_Win_Unstable]  

# Linux build
linuxBuildDebug:
  stage: build
  before_script:
    - chmod a+rwx ./tests/build/build-512.sh
  script:
    - ./tests/build/build-512.sh |& tee linuxBuild.txt
  tags:
    - Linux
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME-d.so
      - include/$TARGETDIRNAME/*.h
      - build/$UNITTESTSNAME
      - linuxBuild.txt
    when: always
    expire_in: 1 week
  variables:
    BUILDMODE: debug
    BUILDUNITTESTS: "true"
  parallel:
    matrix: 
      - DEVTOOLS: [$DEVTOOLS_Linux_Stable, $DEVTOOLS_Linux_Unstable] 

linuxBuildRelease:
  stage: build
  before_script:
    - chmod a+rwx ./tests/build/build-512.sh
  script:
    - ./tests/build/build-512.sh
  tags:
    - Linux
  only:
    - main
    - tags
  artifacts:
    paths:
      - lib/$TARGETDIRNAME/lib$TARGETNAME.so*
      - include/$TARGETDIRNAME/*.h
    expire_in: 1 week
  variables:
    BUILDMODE: release
    BUILDUNITTESTS: "false"
  parallel:
    matrix: 
      - DEVTOOLS: [$DEVTOOLS_Linux_Stable, $DEVTOOLS_Linux_Unstable]    

# run tests using the binary built before
testWin512:
  extends: .winTestTemplate
  needs: ["windowsBuildDebug: [$DEVTOOLS_Win_Stable]"]
  dependencies: ["windowsBuildDebug: [$DEVTOOLS_Win_Stable]"]
  variables:
    DEVTOOLS: $DEVTOOLS_Win_Stable

testWin512Unstable:
  extends: .winTestTemplate
  needs: ["windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"]
  dependencies: ["windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"]
  variables:
    DEVTOOLS: $DEVTOOLS_Win_Unstable  

testLinux512:
  extends: .linuxTestTemplate
  needs: ["linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"]
  dependencies:
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"
  variables:
    DEVTOOLS: $DEVTOOLS_Linux_Stable    


testLinux512Unstable:
  extends: .linuxTestTemplate
  needs: ["linuxBuildDebug: [$DEVTOOLS_Linux_Unstable]"]
  dependencies:
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Unstable]"
  variables:
    DEVTOOLS: $DEVTOOLS_Linux_Unstable    

# copy files to servers
copyToNightlyBuildWin:
  stage: copy
  script:
    - .\tests\build\copyHeaders-nightlybuild.bat
  dependencies: ["windowsBuildRelease: [$DEVTOOLS_Win_Stable]"]
  tags:
    - Win10
  only:
    - main
  allow_failure: true
  variables:
    NIGHTLYBUILD: "G:\\AT-TW\\GTlab\\Nightly_Builds_512"


copyForDeploymentWin:
  extends: .copyDeployTemplate  
  dependencies:
    - "windowsBuildDebug: [$DEVTOOLS_Win_Stable]"
    - "windowsBuildRelease: [$DEVTOOLS_Win_Stable]"
  variables:
    PLATFORMNAME:  windows
    RELEASESTATUS: stable    

copyForDeploymentWinUnstable:
  extends: .copyDeployTemplate 
  dependencies: 
    - "windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"
    - "windowsBuildRelease: [$DEVTOOLS_Win_Unstable]"
  variables:
    PLATFORMNAME:  windows
    RELEASESTATUS: unstable
 
copyForDeploymentLinux:
  extends: .copyDeployTemplate 
  dependencies:
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"
    - "linuxBuildRelease: [$DEVTOOLS_Linux_Stable]"
  variables:
    PLATFORMNAME:  linux
    RELEASESTATUS: stable

copyForDeploymentLinuxUnstable:
  extends: .copyDeployTemplate 
  dependencies:
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Unstable]"
    - "linuxBuildRelease: [$DEVTOOLS_Linux_Unstable]"
  variables:
    PLATFORMNAME:  linux
    RELEASESTATUS: unstable
  
# code quality
codingstyle:
  needs: []
  stage: codequality
  allow_failure: true
  script:
    - '& $env:CODINGSTYLETOOL --ci --output=xml -o .\ -f  .\features\filefilter.txt .\src 1>codingStyleLog.txt'
  tags:
    - Win10
  except:
    - tags
  dependencies:
  artifacts:
    paths:
      - "nsiqcppstyle_report.xml"
      - codingStyleLog.txt   
    expire_in: 1 week
  variables:
    CODINGSTYLETOOL: "C:\\Program Files\\nsiqcppstyle_0.2.2.3\\nsiqcppstyle\\nsiqcppstyle"
    
cppcheck:
  needs: []
  stage: codequality
  allow_failure: true
  tags:
    - Linux
  before_script:
    - python3 -m venv env
    - source env/bin/activate
    - python3 -m pip install cppcheck-codequality
  script:
    - cppcheck --xml --suppress=unusedFunction  --enable=all src/ 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=codequality.json
  artifacts:
    reports:
      codequality: codequality.json      

pages:
  needs: []
  dependencies:
  stage: badges
  tags:
    - Linux
  script:
    - doxygen features/doxygenConfig
    - mkdir public
    - mv doc/html/* public/
  only:
    - main
    - tag
  artifacts:
     paths:
       - public/
 
# badges
badges:
  stage: badges
  script:
    - $CommitNumber = git rev-list --count HEAD
    - $statistics = git diff --shortstat 4b825dc642cb6eb9a060e54bf8d69288fbee4904
    - $filesRaw,$linesRaw = $statistics.split(',')
    - $fileNumber = $filesRaw.split(' ')[1]
    - $linenumber = $linesRaw.split(' ')[1]
    - '& $env:BADGEGENERATOR --run files $fileNumber'
    - '& $env:BADGEGENERATOR --run commits $CommitNumber'
    - '& $env:BADGEGENERATOR --bw .\buildLog512.txt .'
    - '& $env:BADGEGENERATOR --bw .\linuxBuild.txt .'
    - '& $env:BADGEGENERATOR --cs .\codingStyleLog.txt .'
    - '& $env:BADGEGENERATOR --cc .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --cl .\${UNITTESTSNAME}Coverage.xml .'
    - '& $env:BADGEGENERATOR --dp "Pipeline-Version" ${PIPELINEVERSION} .'
  dependencies:
    - "windowsBuildDebug: [$DEVTOOLS_Win_Unstable]"
    - "linuxBuildDebug: [$DEVTOOLS_Linux_Stable]"
    - testWin512
    - testLinux512
    - codingstyle
  tags:
    - Win10
  except:
    - tags
  artifacts:
    paths:
      - "New_*.svg"
    expire_in: 4 week
  variables:
    BADGEGENERATOR: C:\devel\BadgeBuilder\BadgeGenerator.exe
